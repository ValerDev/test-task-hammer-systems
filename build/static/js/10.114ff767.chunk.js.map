{"version":3,"sources":["redux/requests/Clients.js","redux/actions/Clients.js","views/app-views/main/clients/index.js"],"names":["fetchClients","dispatch","a","axios","get","data","console","error","fetchCurrentClient","id","clientsAC","clients","type","FETCH_CLIENTS","payload","currentClientAC","client","FETCH_CURRENT_CLIENT","connect","state","props","history","useHistory","useEffect","dataSource","length","map","e","i","key","columns","Object","keys","title","charAt","toUpperCase","slice","dataIndex","fallback","cover","onRow","record","onClick","push"],"mappings":"sNAGaA,G,OAAY,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,+EAECC,IAAMC,IAAI,8CAFX,uBAEbC,EAFa,EAEbA,KACPJ,EAASI,GAHW,mBAIb,GAJa,gCAMpBC,QAAQC,MAAM,gDAAd,MANoB,yDAAH,uDAUZC,EAAkB,uCAAG,WAAOP,EAAUQ,GAAjB,iBAAAP,EAAA,+EAELC,IAAMC,IAAN,qDAAwDK,IAFnD,uBAEnBJ,EAFmB,EAEnBA,KACPJ,EAASI,GAHiB,mBAInB,GAJmB,gCAM1BC,QAAQC,MAAM,uDAAd,MAN0B,yDAAH,yD,iCCb/B,iFAEO,SAASG,EAAUC,GACtB,MAAO,CACHC,KAAMC,IACNC,QAASH,GAIV,SAASI,EAAgBC,GAC5B,MAAO,CACHJ,KAAMK,IACNH,QAASE,K,8ICmCFE,uBAZS,SAACC,GACrB,MAAO,CACHR,QAASQ,EAAMR,QAAQA,YAIJ,SAAAV,GACvB,MAAO,CACHD,aAAc,SAAAW,GAAO,OAAIV,EAASS,YAAUC,QAIrCO,EAtCC,SAACE,GAAW,IACjBT,EAAWS,EAAXT,QACDU,EAAUC,cAEhBC,oBAAS,sBAAC,sBAAArB,EAAA,sEACAF,YAAaoB,EAAMpB,cADnB,2CAEP,IAGH,IAAMwB,EAAab,EAAQc,OAASd,EAAQe,KAAI,SAACC,EAAGC,GAAJ,mBAAC,eAAcD,GAAf,IAAkBE,MAAOD,OAAO,GAE1EE,EAAUnB,EAAQc,OAASM,OAAOC,KAAKrB,EAAQ,IAAIe,KAAI,SAACC,EAAEC,GAC5D,MAA+B,kBAAjBjB,EAAQiB,GAAGD,GAAiB,CAACM,MAAON,EAAEO,OAAO,GAAGC,cAAgBR,EAAES,MAAM,GAAIC,UAAWV,EAAGE,IAAKF,GAAK,MACjH,GAEL,OACI,cAAC,IAAD,CAAOW,SAAU,cAAC,IAAD,CAASC,MAAM,YAAaf,WAAYA,EAAYM,QAASA,EAAUU,MAAO,SAACC,GAC5F,MAAO,CACHC,QAAS,WACLrB,EAAQsB,KAAR,2BAAiCF,EAAOhC","file":"static/js/10.114ff767.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {FETCH_CURRENT_CLIENT} from \"../constants/Clients\";\r\n\r\nexport const fetchClients = async dispatch => {\r\n    try {\r\n        const {data} = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n        dispatch(data)\r\n        return true\r\n    } catch (e) {\r\n        console.error('something went wrong while fetching clients: ', e);\r\n    }\r\n}\r\n\r\nexport const fetchCurrentClient = async (dispatch, id) => {\r\n    try {\r\n        const {data} = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        dispatch(data)\r\n        return true\r\n    } catch (e) {\r\n        console.error('something went wrong while fetching current client: ', e);\r\n    }\r\n}\r\n","import {FETCH_CLIENTS, FETCH_CURRENT_CLIENT} from \"redux/constants/Clients\";\r\n\r\nexport function clientsAC(clients) {\r\n    return {\r\n        type: FETCH_CLIENTS,\r\n        payload: clients,\r\n    };\r\n}\r\n\r\nexport function currentClientAC(client) {\r\n    return {\r\n        type: FETCH_CURRENT_CLIENT,\r\n        payload: client,\r\n    };\r\n}","import React, {useEffect} from \"react\";\r\nimport {fetchClients} from \"../../../../redux/requests/Clients\";\r\nimport {connect} from \"react-redux\";\r\nimport Loading from \"../../../../components/shared-components/Loading\";\r\nimport {clientsAC} from \"../../../../redux/actions/Clients\";\r\nimport {Table} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst Clients = (props) => {\r\n    const {clients} = props\r\n    const history = useHistory();\r\n\r\n    useEffect(async () => {\r\n        await fetchClients(props.fetchClients)\r\n    }, [])\r\n\r\n\r\n    const dataSource = clients.length ? clients.map((e, i) => ({...e, key: ++i})) : [];\r\n\r\n    const columns = clients.length ? Object.keys(clients[0]).map((e,i) => {\r\n        return typeof clients[i][e] !=='object' ? {title: e.charAt(0).toUpperCase() + e.slice(1), dataIndex: e, key: e} : {}\r\n    }) : []\r\n\r\n    return (\r\n        <Table fallback={<Loading cover=\"content\"/>} dataSource={dataSource} columns={columns}  onRow={(record) => {\r\n            return {\r\n                onClick: () => {\r\n                    history.push(`/app/main/client/${record.id}`)\r\n                },\r\n            };\r\n        }}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        clients: state.clients.clients\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchClients: clients => dispatch(clientsAC(clients))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Clients)"],"sourceRoot":""}